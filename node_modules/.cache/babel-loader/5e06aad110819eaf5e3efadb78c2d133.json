{"ast":null,"code":"import { ActionType } from '../types';\nexport const getWeather = city => {\n  return async dispatch => {\n    try {\n      const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=c9619b4a421240bd3082e70e21c9bbc1`);\n\n      if (!res.ok) {\n        const resData = await res.json();\n        throw new Error(resData.message);\n      }\n\n      const resData = await res.json();\n      dispatch({\n        type: ActionType.GET_WEATHER,\n        payload: resData\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionType.SET_ERROR,\n        payload: err.message\n      });\n    }\n  };\n};\nexport const setLoading = () => {\n  return {\n    type: ActionType.SET_LOADING\n  };\n};\nexport const setError = () => {\n  return {\n    type: ActionType.SET_ERROR,\n    payload: ''\n  };\n};","map":{"version":3,"sources":["/zfsz1/Config/CodeServer/workspace/weatherapp/src/store/actions/weatherActions.ts"],"names":["ActionType","getWeather","city","dispatch","res","fetch","ok","resData","json","Error","message","type","GET_WEATHER","payload","err","SET_ERROR","setLoading","SET_LOADING","setError"],"mappings":"AAEA,SAA4DA,UAA5D,QAA6E,UAA7E;AACA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAA8D;AACpF,SAAO,MAAMC,QAAN,IAAgB;AACnB,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,qDAAoDH,IAAK,yCAA3D,CAAvB;;AACA,UAAI,CAACE,GAAG,CAACE,EAAT,EAAY;AACR,cAAMC,OAAqB,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAApC;AACA,cAAM,IAAIC,KAAJ,CAAUF,OAAO,CAACG,OAAlB,CAAN;AACH;;AACD,YAAMH,OAAmB,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAlC;AACAL,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAACX,UAAU,CAACY,WADX;AAELC,QAAAA,OAAO,EAACN;AAFH,OAAD,CAAR;AAIH,KAXD,CAWC,OAAMO,GAAN,EAAU;AACPX,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAACX,UAAU,CAACe,SADX;AAELF,QAAAA,OAAO,EAACC,GAAG,CAACJ;AAFP,OAAD,CAAR;AAIH;AACJ,GAlBD;AAmBH,CApBM;AAqBP,OAAO,MAAMM,UAAU,GAAE,MAAkB;AACvC,SAAM;AACFL,IAAAA,IAAI,EAACX,UAAU,CAACiB;AADd,GAAN;AAGH,CAJM;AAKP,OAAO,MAAMC,QAAQ,GAAG,MAAkB;AACtC,SAAM;AACFP,IAAAA,IAAI,EAACX,UAAU,CAACe,SADd;AAEFF,IAAAA,OAAO,EAAC;AAFN,GAAN;AAIH,CALM","sourcesContent":["import {ThunkAction} from 'redux-thunk'\nimport {RootState} from '..';\nimport {WeatherAction,WeatherData,WeatherError,WeatherState,ActionType} from '../types'\nexport const getWeather = (city:string):ThunkAction<void,RootState,null,WeatherAction>=>{\n    return async dispatch=>{\n        try {\n            const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=c9619b4a421240bd3082e70e21c9bbc1`);\n            if (!res.ok){\n                const resData: WeatherError = await res.json();\n                throw new Error(resData.message);\n            }\n            const resData:WeatherData = await res.json();\n            dispatch({\n                type:ActionType.GET_WEATHER,\n                payload:resData\n            });\n        }catch(err){\n            dispatch({\n                type:ActionType.SET_ERROR,\n                payload:err.message\n            })\n        }\n    }        \n}\nexport const setLoading =():WeatherAction=>{\n    return{\n        type:ActionType.SET_LOADING\n    }\n}\nexport const setError = ():WeatherAction=>{\n    return{\n        type:ActionType.SET_ERROR,\n        payload:''\n    }\n}"]},"metadata":{},"sourceType":"module"}